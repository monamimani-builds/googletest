name: CI

on:
  workflow_dispatch:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on:  windows-2019

    strategy:
      fail-fast: false
      matrix:
        BuidType: [Debug, RelWithDebInfo]

    env:
      ArtifactName: GoogleTest${{ matrix.BuidType }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Cmake generate
        run: |
        
          $vswherePath="${Env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"

          $installDir = & $vswherePath -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath

          $vcvarallPath = join-path $installDir 'VC\Auxiliary\Build\vcvarsall.bat'

          if(!(test-path $vcvarallPath)) {
            exit /b 2
          }

          cmd.exe /c " `"$vcvarallPath`" x64 && set" | foreach {
            # if the line is a session variable
            if( $_ -match "=" )
            {
              $pair = $_.split("=");
              # Set the environment variable for the current PowerShell session
              Set-Item -Force -Path "ENV:\$($pair[0])" -Value "$($pair[1])"
            }
          }

          cmake -S googletest -Wno-dev -B ${{ github.workspace }}\_build -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}\_install -DCMAKE_BUILD_TYPE=${{ matrix.BuidType }} -DCMAKE_CXX_COMPILER="cl.exe" -DCMAKE_C_COMPILER="cl.exe" -DMSVC_TOOLSET_VERSION=142 -D BUILD_GMOCK=TRUE -DBUILD_SHARED_LIBS=TRUE -DINSTALL_GTEST=TRUE -G Ninja         
          cmake --build ./_build --target install --config ${{ matrix.BuidType }}
          
          Get-ChildItem -Recurse -Depth 2

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ${{ github.workspace }}\_install
          name: ${{ env.ArtifactName }}

  release:
    #if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Create Release
        id: CreateRelease
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store Release url
        run: |
          echo "${{ steps.CreateRelease.outputs.upload_url }}" > ./upload_url
          
          find ${{ github.workspace }} -maxdepth 2 -type d -ls
          
      - uses: actions/upload-artifact@v1
        with:
          path: ./upload_url
          name: upload_url
          
  publish:
    #if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: release
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: ${ { matrix.config.artifact } }
          path: ./

      - name: Download URL
        uses: actions/download-artifact@v1
        with:
          name: upload_url
          path: ./
      - id: set_upload_url
        run: |
          upload_url=`cat ./upload_url`
          echo ::set-output name=upload_url::$upload_url

